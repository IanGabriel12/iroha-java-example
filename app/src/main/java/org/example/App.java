/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import jp.co.soramitsu.iroha2.client.Iroha2AsyncClient;
import jp.co.soramitsu.iroha2.generated.DomainId;
import jp.co.soramitsu.iroha2.generated.AccountId;
import jp.co.soramitsu.iroha2.generated.Domain;
import jp.co.soramitsu.iroha2.generated.Name;
import jp.co.soramitsu.iroha2.generated.SignedTransaction;
import jp.co.soramitsu.iroha2.model.IrohaUrls;
import jp.co.soramitsu.iroha2.query.QueryAndExtractor;
import jp.co.soramitsu.iroha2.query.QueryBuilder;
import jp.co.soramitsu.iroha2.transaction.TransactionBuilder;
import jp.co.soramitsu.iroha2.CryptoUtils;

import java.net.URL;
import java.security.KeyPair;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.concurrent.CompletableFuture;

public class App {
    public static void main(String[] args) throws Exception {
        DomainId domainId = new DomainId(new Name("wonderland"));
        AccountId admin = new AccountId(domainId, new Name("alice"));

        KeyPair pair = CryptoUtils.keyPairFromHex(
            "7233bfc89dcbd68c19fde6ce6158225298ec1131b6a130d1aeb454c1ab5183c0",
            "9ac47abf59b356e0bd7dcbbbb4dec080e302156a48ca907e47cb6aea1d32719e"
        );
        
        URL telemetryUrl = new URL("http://127.0.0.1:8180");
        URL peerUrl = new URL("http://127.0.0.1:8080");
        List<IrohaUrls> urls = new ArrayList<IrohaUrls>(); 
        
        urls.add(new IrohaUrls(peerUrl, telemetryUrl, peerUrl));
        Iroha2AsyncClient client = new Iroha2AsyncClient(urls);
        
        Long millisLong = Calendar.getInstance().getTimeInMillis();
        String domainName = "hello-world" + millisLong;
        DomainId newDomainId = new DomainId(new Name(domainName));

        SignedTransaction transaction = TransactionBuilder.Companion
            .builder()
            .account(admin)
            .registerDomain(newDomainId)
            .buildSigned(pair);

        client.sendTransactionAsync(transaction).get();

        QueryAndExtractor<Domain> query = QueryBuilder
            .findDomainById(newDomainId)
            .account(admin)
            .buildSigned(pair);
        
        CompletableFuture<Domain> future = client.sendQueryAsync(query);
        Domain domain = future.get();

        System.out.println(domain.getId().getName().getString());

        client.close();
    }
}
